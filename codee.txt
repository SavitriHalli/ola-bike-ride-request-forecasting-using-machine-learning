# ----------------------------
# Import Libraries
# ----------------------------
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score

# ----------------------------
# Step 1: Simulate Ride Data
# ----------------------------
np.random.seed(42)
n = 200

data = pd.DataFrame({
    'distance_km': np.round(np.random.uniform(1, 20, size=n), 2),
    'duration_min': np.round(np.random.uniform(5, 60, size=n), 2),
    'time_of_day': np.random.choice(['Morning', 'Afternoon', 'Evening', 'Night'], n),
    'user_type': np.random.choice(['New', 'Returning'], n)
})

# Simulate fare based on a formula
data['fare'] = (
    20 +
    data['distance_km'] * 5 +
    data['duration_min'] * 0.6 +
    np.where(data['time_of_day'] == 'Night', 10, 0) +
    np.where(data['user_type'] == 'New', 15, 0) +
    np.random.normal(0, 5, n)  # Add noise
)

print("Sample Data:\n", data.head())

# ----------------------------
# Step 2: Prepare Data
# ----------------------------
X = data.drop('fare', axis=1)
y = data['fare']

categorical = ['time_of_day', 'user_type']

preprocessor = ColumnTransformer([
    ('cat', OneHotEncoder(drop='first', sparse_output=False), categorical)
], remainder='passthrough')

model_pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())
])

# ----------------------------
# Step 3: Train/Test Split
# ----------------------------
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# ----------------------------
# Step 4: Train & Predict
# ----------------------------
model_pipeline.fit(X_train, y_train)
y_pred = model_pipeline.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"\nModel Performance:\nRMSE = {rmse:.2f}, RÂ² = {r2:.3f}")

# ----------------------------
# Step 5: Visualization
# ----------------------------

# Scatter plot: Actual vs Predicted
plt.figure(figsize=(6, 4))
plt.scatter(y_test, y_pred, alpha=0.7, color="blue")
plt.xlabel("Actual Fare")
plt.ylabel("Predicted Fare")
plt.title("Actual vs Predicted Fare")
plt.plot([y.min(), y.max()], [y.min(), y.max()], "r--")
plt.show()

# Histogram of fares
plt.figure(figsize=(6, 4))
plt.hist(data['fare'], bins=20, color='skyblue', edgecolor='black')
plt.xlabel("Fare")
plt.ylabel("Frequency")
plt.title("Distribution of Fares")
plt.show()

# Boxplot of fare by user type
plt.figure(figsize=(6, 4))
sns.boxplot(x='user_type', y='fare', data=data, palette="Set2")
plt.title("Fare by User Type")
plt.show()

# Scatter plot: distance vs fare, color by time_of_day
plt.figure(figsize=(6, 4))
sns.scatterplot(x='distance_km', y='fare', hue='time_of_day', data=data, palette="bright")
plt.title("Distance vs Fare by Time of Day")
plt.xlabel("Distance (km)")
plt.ylabel("Fare")
plt.show()